{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Regional Land Cover Monitoring System","text":""},{"location":"#installation","title":"Installation","text":"<p>Install with pip: </p> <pre><code>pip install rlcms\n</code></pre> <p>Test that <code>earthengine-api</code> is setup and authenticated by checking the folder contents within one of your cloud projects.  * In your shell, run:</p> <pre><code>earthengine set_project &lt;project-name&gt;\nearthengine ls projects/project-name/assets\n</code></pre> <p>If you do not get an error and it returns a list of folders and assets similar to this then you are good to go! :tada:</p>"},{"location":"#features","title":"Features","text":"<ul> <li>stratified sampling for use in Collect Earth Online</li> <li>Training and validation data extraction, from points or polygon references</li> <li>Land cover modeling using Primitive ensembles, complete with model metrics for iterative improvements</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from rlcms.composites import Composite\n# Create an annual Sentinel-1 Composite\nc = Composite(dataset='Sentinel1',\n        region=aoi,\n        start_date='2020-01-01',\n        end_date='2021-12-31',\n        composite_mode='annual',\n        reducer='median')\n\n# look at the Composite object\nprint(c.__dict__)\n\n# retrieve band names\nprint(f\"Composite bands:{c.bands}\")\n\n# retrieve ee.Image from Composite object \nimage = c.image\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions from the community. If there are issues are improvements, please submit an issue on Github: https://github.com/sig-gis/rlcms</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GPL-3 License - see the LICENSE file for details.</p>"},{"location":"about/","title":"About RLCMS","text":"<p>Monitoring land cover and land use change by providing accurate and timely land cover maps and information, plays a critical role in multiple sectors in the developing world including agricultural planning and food security, carbon accounting, water management and natural resource management. However, many developing countries, including those within the Lower Mekong region, lack the coordinated capacity to produce timely, and temporally comparable geospatial data products sufficient to meet their management needs.</p> <p>The Regional Land Cover Monitoring System (RLCMS) was developed by SERVIR-Mekong with the support of the U.S. Forest Service, NASA Applied Science Program, Google, the University of Maryland and governments of countries in the Mekong region. The system utilizes satellite technology to facilitate the production of customized, high-quality regional land cover maps at a 30-m resolution for each year from 2000 to present, in addition to complimentary land cover information. Using publicly available global satellite data, such as Landsat and MODIS, makes the system easily transferable. The adaptable system framework allows for a customized service that is able to map different land cover typologies based on ongoing user needs and bespoke landscape monitoring objectives.</p> <p></p>"},{"location":"about/#a-python-package-for-co-development","title":"A python package for co-development","text":"<p>The <code>rlcms</code> python package is meant to jump-start local mapping projects and provide a living co-development tool for regional and global collaborators to build methodologies and share reproducible results. </p>"},{"location":"cli/","title":"CLI Tool Documentation","text":"<p>Each Command Line Interface (CLI) script tool can be run in your command-line terminal of choice. The user must provide values for each required command-line argument to control the analysis. You can first run any script, only declaring the <code>-h</code> flag. This will bring up the help dialog with a usage example and a description of required command-line arguments. </p>"},{"location":"cli/#sample_pts","title":"sample_pts","text":"<p>Generate Random Sample Points From an ee.Image, Formatted for Collect Earth Online</p> <p>The points are pre-formatted for use in Collect Earth Online. You can choose to export the points to Google Drive, to GEE Asset or both. </p> <p>example:</p> <pre><code>sample_pts -im input/path/to/image -band LANDCOVER -o output/path --n_points 100 --to_drive\n</code></pre>"},{"location":"cli/#composite","title":"composite","text":"<p>Create a Composite from one or multiple datasets. </p> <p>The resulting band stack is needed for both extracting training data (using <code>train_test</code>) and as input stack for the primitive model training &amp; inference (using <code>primitives</code> tool). </p> <p>There are many compositing options available, which you control in the CLI with your own settings .txt file. Follow this template <code>composite_template_settings.txt</code> to create your own file, then pass this file's path to <code>--settings</code>. </p> <p>If your AOI is a set of reference polygons and not one contiguous AOI polygon, set <code>multi_poly</code> to <code>true</code> in your <code>--settings</code> file - this will export band information only within each polygon's footprint. </p> <p>example:</p> <pre><code>composite -a aoi/fc/path -d Landsat8 -s 2020-01-01 -e 2020-12-31 -o output/path --settings path/to/settings/file.txt\n</code></pre>"},{"location":"cli/#train_test","title":"train_test","text":"<p>Extract Train and Test Point Data from an Input Image using a Reference Locations (can be Point or Polygon).</p> <p>Generates stratified random samples from reference locations, splitting the sample points into train and test points if desired. The image bands from the provided image are extracted to every point. </p> <p>example:</p> <pre><code>train_test -ref path/to/reference_fc -im path/to/input/stack -band LANDCOVER --scale 10\n                -o unique/output/path --class_values 1 2 3 4 5 6 7 8 --class_points 10 10 10 10 10 10 10\n</code></pre>"},{"location":"cli/#primitives","title":"primitives","text":"<p>Create Primitives For All Classes in Provided Training Data. </p> <p>This script trains probability models for each land cover class in your typology as provided by the numeric <code>--class_name</code> property in the provided reference data. It then exports these binary probability images one land cover at a time into a land cover 'Primitives' image collection. Model metrics are retained in the Images themselves as properties, which the user can choose to export to local files by setting a <code>--metrics_folder</code> local folder path during the run. </p> <p>example:</p> <pre><code>primitives -i path/to/input_stack -t path/to/training_data --class_name LANDCOVER -o path/to/output --metrics_folder local/folder/path\n</code></pre>"},{"location":"cli/#landcover","title":"landcover","text":"<p>Generate Single Land Cover Image From Land Cover Primitives Image Collection</p> <p>This script takes a Primitives Image Collection and assembles a single-band land cover image from them using per-pixel max probability.</p> <p>example:</p> <pre><code>landcover -i input/primitives/imagecollection/path -o output/path\n</code></pre>"},{"location":"composites/","title":"composites module","text":""},{"location":"composites/#rlcms.composites.Composite","title":"<code>Composite</code>","text":"<p>Initializes Composite class</p> <p>Processes multi-band composite of your chosen dataset(s) within an AOI footprint polygon</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str</code> <p>one of: 'Landsat5','Landsat7','Landsat8','Sentinel1Asc','Sentinel1Desc','Sentinel2','Modis','Viirs')</p> required <code>region</code> <code>FeatureCollection</code> <p>area of interest</p> required <code>start_date</code> <code>str</code> <p>start date</p> required <code>end_date</code> <code>str</code> <p>end date</p> required kwargs <p>indices:list[str] composite_mode:str One of ['seasonal','annual'] Default = 'annual'  season:list[str|int] reducer:str|ee.Reducer addTasselCap:bool addTopography:bool addJRC:bool harmonicsOptions:dict in this format: {'nir':{'start':int[1:365],'end':[1:365]}}</p> <p>Returns:</p> Type Description <p>ee.Image: multi-band image composite within region</p>"},{"location":"composites/#rlcms.composites.Composite.stack","title":"<code>stack(other)</code>","text":"<p>stacks composites together, formatting bands and properties</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>composite</code> <p>RLCMS Composite</p> required <code>other</code> <code>composite</code> <p>RLCMS Composite</p> required <p>returns:     ee.Image</p>"},{"location":"composites/#rlcms.composites.get_agg_timing","title":"<code>get_agg_timing(collection, **kwargs)</code>","text":"<p>utility function for hf.Dataset.aggregate_time(). Formats <code>period</code>, <code>period_unit</code>, and <code>dates</code> args     to create certain types of composites (defined by <code>composite_mode</code>) args:     collection (hf.Dataset): Hydrafloods Dataset kwargs:     composite_mode (str): one of 'annual' or 'seasonal', Default = 'annual'     season (list[str|int]): consecutive list of months (e.g. ['01','02','03']) comprising the season.         A required arg if composite_mode == 'seasonal' Returns:     tuple(period(int),period_unit(str),dates(list[str]))</p>"},{"location":"covariates/","title":"covariates module","text":""},{"location":"covariates/#rlcms.covariates.indices","title":"<code>indices</code>","text":""},{"location":"covariates/#rlcms.covariates.indices.addAllTasselCapIndices","title":"<code>addAllTasselCapIndices(img)</code>","text":"<p>Function to get all tasselCap indices</p>"},{"location":"covariates/#rlcms.covariates.indices.addJRC","title":"<code>addJRC(img)</code>","text":"<p>Function to add JRC Water layers: 'occurrence', 'change_abs',  'change_norm', 'seasonality','transition', 'max_extent'</p>"},{"location":"covariates/#rlcms.covariates.indices.addTopography","title":"<code>addTopography(img)</code>","text":"<p>Function to add 30m SRTM elevation and derived slope, aspect, eastness, and  northness to an image. Elevation is in meters, slope is between 0 and 90 deg, aspect is between 0 and 359 deg. Eastness and northness are unitless and are between -1 and 1.</p>"},{"location":"covariates/#rlcms.covariates.indices.getIndices","title":"<code>getIndices(img, covariates)</code>","text":"<p>add indices to image</p>"},{"location":"covariates/#rlcms.covariates.indices.removeDuplicates","title":"<code>removeDuplicates(covariateList, bands)</code>","text":"<p>function to remove duplicates, i.e. existing bands do not need to be calculated</p>"},{"location":"covariates/#rlcms.covariates.indices.renameBands","title":"<code>renameBands(image, prefix)</code>","text":"<p>renames bands with prefix</p>"},{"location":"covariates/#rlcms.covariates.returnCovariates","title":"<code>returnCovariates(img)</code>","text":"<p>Workflow for computing Landsat and covariates. bands and covariates are hardcoded inside the function.</p>"},{"location":"covariates/#rlcms.covariates.returnCovariatesFromOptions","title":"<code>returnCovariatesFromOptions(img, **kwargs)</code>","text":"<p>Computes and adds image covariates according to user settings args:         img (ee.Image): image to compute covariates          kwargs (dict): a settings dictionary  returns:         img (ee.Image): multi-band image with all desired covariates</p>"},{"location":"harmonics/","title":"harmonics module","text":""},{"location":"harmonics/#rlcms.harmonics.addHarmonicTerms","title":"<code>addHarmonicTerms(image)</code>","text":"<p>add Time bands to image</p>"},{"location":"harmonics/#rlcms.harmonics.addTimeConstant","title":"<code>addTimeConstant(imageCollection, timeField)</code>","text":"<p>Add time constant to images in an ImageCollection timeField: time stamp property name (typically is the 'system:time_start' property of an image)</p>"},{"location":"harmonics/#rlcms.harmonics.calculateHarmonic","title":"<code>calculateHarmonic(imageCollection, dependent)</code>","text":"<p>Calculate harmonic coefficients (phase and amplitude) off of an ImageCollection dependent: band that you fit the harmonic model for, must be contained in ImageCollection</p>"},{"location":"harmonics/#rlcms.harmonics.doHarmonicsFromOptions","title":"<code>doHarmonicsFromOptions(imgColl, **kwargs)</code>","text":"<p>calculateHarmonic function band-wise</p> <p>kwargs:     harmonicsOptions (dict): which band(s) and the DOY start and end date to compute harmonics on         formatted like:          {             'red':{'start':1,'end':365},             'blue':{'start':1,'end':365}             } returns:     ee.Image containing bands [band_phase, band_amplitude]</p>"},{"location":"harmonics/#rlcms.harmonics.harmonicRGB","title":"<code>harmonicRGB(harmonics)</code>","text":"<p>Use the HSV to RGB transform to display phase and amplitude</p>"},{"location":"primitives/","title":"primitives module","text":""},{"location":"primitives/#rlcms.primitives.Primitives","title":"<code>Primitives</code>","text":""},{"location":"primitives/#rlcms.primitives.Primitives.__init__","title":"<code>__init__(inputs=None, training=None, class_name=None, asset_id=None)</code>","text":""},{"location":"primitives/#rlcms.primitives.Primitives.assemble_max_probability","title":"<code>assemble_max_probability()</code>","text":"<p>Take Image Collection of RF Primitives, perform pixel-wise maximum of all Primitive probability images to return single-band LC image Array computation returns img values from 0 to n-1 due to 0-base indexing, so we .add(1) to match LC strata</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <p>multiband image of probabilities</p> required <code>remapNum</code> <p>list, list of intergers 0-N matching the number of probability bands</p> required <code>originalNum</code> <p>list, list of inergers n-N matching the number of probability bands         that represent their desired map values</p> required <p>Returns: ee.Image of Land Cover</p>"},{"location":"primitives/#rlcms.primitives.Primitives.export_metrics","title":"<code>export_metrics(metrics_path)</code>","text":"<p>Parse variable importance and OOB Error estimate from trained model, output to local files respectively Currently only works for Primitives objects in memory (not loaded from pre-existing ImgColl)</p>"},{"location":"primitives/#rlcms.primitives.Primitives.export_to_asset","title":"<code>export_to_asset(collection_assetId=None, scale=None, crs=None, crsTransform=None, maxPixels=None, **kwargs)</code>","text":"<p>Export Primitives to Asset as an ImageCollection</p> <p>Parameters:</p> Name Type Description Default <code>collection_assetId</code> <code>str</code> <p>output ImageCollection asset path </p> <code>None</code> <code>scale</code> <code>int</code> <p>export scale</p> <code>None</code> <code>crs</code> <code>str</code> <p>export CRS ('EPSG:4326')</p> <code>None</code> <code>crsTransform</code> <code>list</code> <p>export CRS Transform</p> <code>None</code> <code>maxPixels</code> <code>int</code> <p>max Pixels</p> <code>None</code> <p>Returns:</p> Type Description <p>None, Submits all Export Image tasks for Primitive collection</p>"},{"location":"primitives/#rlcms.primitives.Primitives.export_to_drive","title":"<code>export_to_drive(description, folder, fileNamePrefix, dimensions=None, region=None, scale=None, crs=None, crsTransform=None, maxPixels=None, shardSize=None, fileDimensions=None, skipEmptyTiles=None, fileFormat=None, formatOptions=None, **kwargs)</code>","text":"<p>Export Primitives to Drive as a Multi-band GeoTiff</p> <p>See rlcms.utils.export_img_to_drive() docs for Args</p> <p>Returns:</p> Type Description <p>None, Submits all Export Image tasks for Primitive collection</p>"},{"location":"sampling/","title":"sampling module","text":""},{"location":"sampling/#rlcms.sampling.distanceFilter","title":"<code>distanceFilter(pts, distance)</code>","text":"<p>Filter Points within a FeatureCollection by a minimum distance threshold</p>"},{"location":"sampling/#rlcms.sampling.plot_id_global","title":"<code>plot_id_global(n, feat)</code>","text":"<p>takes an index number (n) and adds it to current PLOTID property of a feature  to ensure PLOTID values are globally unique (necessary for multiple sets of AOI sampling)</p>"},{"location":"sampling/#rlcms.sampling.split_train_test","title":"<code>split_train_test(pts, seed)</code>","text":"<p>stratify 80/20 train and test points</p>"},{"location":"sampling/#rlcms.sampling.strat_sample","title":"<code>strat_sample(img, class_band, region, scale, seed, n_points, class_values, class_points, ceo_format=True)</code>","text":"<p>A wrapper for ee.Image.stratifiedSample() with CEO schema formatting if desired Note: This function has been found to be less efficient on EECUs and Memory than those defined above.         Use the strat_sample_w_extraction for training data generation         strat_sample_no_extraction can be used for testing data generation (predictor bands not required)</p>"},{"location":"sampling/#rlcms.sampling.strat_sample_from_reference","title":"<code>strat_sample_from_reference(img, collection, class_band, scale, crs, seed, class_values, class_points)</code>","text":"<p>Generates stratified random sample pts from reference polygons with all bands from input image extracted</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>Image</code> <p>image whose bands will be extracted to the sample points</p> required <code>collection</code> <code>FeatureCollection</code> <p>reference polygons FeatureCollection</p> required <code>class_band</code> <code>str</code> <p>property name of the reference (i.e. 'LANDCOVER')</p> required <code>scale</code> <code>int</code> <p>resolution to sample the grid at</p> required <code>seed</code> <code>int</code> <p>random seed</p> required <code>class_values</code> <code>list</code> <p>unique reference labels (e.g. [1,2,3,4])</p> required <code>class_points</code> <code>list</code> <p>number of points to sample per label (e.g. [100,200,100,200])</p> required <p>returns:   ee.FeatureCollection of sample points      They will contain the properties inherited from the reference polygons,        a 'random' property, and all bands from the image as properties.</p>"},{"location":"sampling/#rlcms.sampling.strat_sample_no_extraction","title":"<code>strat_sample_no_extraction(collection, class_band, scale, seed, class_values=None, class_points=None)</code>","text":"<p>Generates stratified random sample pts from reference polygons. Does not extract raster data to the points. </p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>FeatureCollection</code> <p>reference polygons FeatureCollection</p> required <code>class_band</code> <code>str</code> <p>property name of the reference (i.e. 'LANDCOVER')</p> required <code>scale</code> <code>int</code> <p>resolution to sample the grid at</p> required <code>seed</code> <code>int</code> <p>random seed</p> required <code>class_values</code> <code>list</code> <p>unique reference labels (e.g. [1,2,3,4])</p> <code>None</code> <code>class_points</code> <code>list</code> <p>number of points to sample per label (e.g. [100,200,100,200])</p> <code>None</code> <p>returns:   ee.FeatureCollection of sample points      They will contain the properties inherited from the reference polygons and a 'random' property</p>"},{"location":"sampling/#rlcms.sampling.strat_sample_w_extraction","title":"<code>strat_sample_w_extraction(img, collection, scale, crs, class_band, seed, class_values, class_points)</code>","text":"<p>Generates stratified random sample pts from reference polygons with all bands from input image extracted</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>Image</code> <p>image whose bands will be extracted to the sample points</p> required <code>collection</code> <code>FeatureCollection</code> <p>reference polygons FeatureCollection</p> required <code>class_band</code> <code>str</code> <p>property name of the reference (i.e. 'LANDCOVER')</p> required <code>scale</code> <code>int</code> <p>resolution to sample the grid at</p> required <code>seed</code> <code>int</code> <p>random seed</p> required <code>class_values</code> <code>list</code> <p>unique reference labels (e.g. [1,2,3,4])</p> required <code>class_points</code> <code>list</code> <p>number of points to sample per label (e.g. [100,200,100,200])</p> required <p>returns:   ee.FeatureCollection of sample points      They will contain the properties inherited from the reference polygons,        a 'random' property, and all bands from the image as properties.</p>"},{"location":"utils/","title":"utils module","text":""},{"location":"utils/#rlcms.utils.exportTableToAsset","title":"<code>exportTableToAsset(collection, description, asset_id)</code>","text":"<p>Export FeatureCollection to GEE Asset</p>"},{"location":"utils/#rlcms.utils.exportTableToDrive","title":"<code>exportTableToDrive(collection, description, folder, file_name_prefix, selectors)</code>","text":"<p>export FeatureCollection to Google Drive</p>"},{"location":"utils/#rlcms.utils.export_image_to_drive","title":"<code>export_image_to_drive(image, description='myExportImageTask', folder=None, fileNamePrefix=None, dimensions=None, region=None, scale=None, crs=None, crsTransform=None, maxPixels=None, shardSize=None, fileDimensions=None, skipEmptyTiles=None, fileFormat=None, formatOptions=None, **kwargs)</code>","text":"<p>Creates a batch task to export an Image as a raster to Google Drive.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <p>The image to be exported.</p> required <code>description</code> <p>Human-readable name of the task.</p> <code>'myExportImageTask'</code> <code>folder</code> <p>The name of a unique folder in your Drive account to export into. Defaults to the root of the drive.</p> <code>None</code> <code>fileNamePrefix</code> <p>The Google Drive filename for the export. Defaults to the name of the task.</p> <code>None</code> <code>dimensions</code> <p>The dimensions of the exported image. Takes either a single positive integer as the maximum dimension or \"WIDTHxHEIGHT\" where WIDTH and HEIGHT are each positive integers.</p> <code>None</code> <code>region</code> <p>The lon,lat coordinates for a LinearRing or Polygon specifying the region to export. Can be specified as a nested lists of numbers or a serialized string. Defaults to the image's region.</p> <code>None</code> <code>scale</code> <p>The resolution in meters per pixel. Defaults to the native resolution of the image assset unless a crsTransform is specified.</p> <code>None</code> <code>crs</code> <p>The coordinate reference system of the exported image's projection. Defaults to the image's default projection.</p> <code>None</code> <code>crsTransform</code> <p>A comma-separated string of 6 numbers describing the affine transform of the coordinate reference system of the exported image's projection, in the order: xScale, xShearing, xTranslation, yShearing, yScale and yTranslation. Defaults to the image's native CRS transform.</p> <code>None</code> <code>maxPixels</code> <p>The maximum allowed number of pixels in the exported image. The task will fail if the exported region covers more pixels in the specified projection. Defaults to 100,000,000.</p> <code>None</code> <code>shardSize</code> <p>Size in pixels of the tiles in which this image will be computed. Defaults to 256.</p> <code>None</code> <code>fileDimensions</code> <p>The dimensions in pixels of each image file, if the image is too large to fit in a single file. May specify a single number to indicate a square shape, or a tuple of two dimensions to indicate (width,height). Note that the image will still be clipped to the overall image dimensions. Must be a multiple of shardSize.</p> <code>None</code> <code>skipEmptyTiles</code> <p>If true, skip writing empty (i.e. fully-masked) image tiles. Defaults to false.</p> <code>None</code> <code>fileFormat</code> <p>The string file format to which the image is exported. Currently only 'GeoTIFF' and 'TFRecord' are supported, defaults to 'GeoTIFF'.</p> <code>None</code> <code>formatOptions</code> <p>A dictionary of string keys to format specific options.</p> <code>None</code> <code>**kwargs</code> <p>Holds other keyword arguments that may have been deprecated such as 'crs_transform', 'driveFolder', and 'driveFileNamePrefix'.</p> <code>{}</code>"},{"location":"utils/#rlcms.utils.export_img_to_asset","title":"<code>export_img_to_asset(image, description='myExportImageTask', assetId=None, pyramidingPolicy=None, dimensions=None, region=None, scale=None, crs=None, crsTransform=None, maxPixels=None, **kwargs)</code>","text":"<p>Creates a task to export an EE Image to an EE Asset.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <p>The image to be exported.</p> required <code>description</code> <p>Human-readable name of the task.</p> <code>'myExportImageTask'</code> <code>assetId</code> <p>The destination asset ID.</p> <code>None</code> <code>pyramidingPolicy</code> <p>The pyramiding policy to apply to each band in the image, a dictionary keyed by band name. Values must be one of: \"mean\", \"sample\", \"min\", \"max\", or \"mode\". Defaults to \"mean\". A special key, \".default\", may be used to change the default for all bands.</p> <code>None</code> <code>dimensions</code> <p>The dimensions of the exported image. Takes either a single positive integer as the maximum dimension or \"WIDTHxHEIGHT\" where WIDTH and HEIGHT are each positive integers.</p> <code>None</code> <code>region</code> <p>The lon,lat coordinates for a LinearRing or Polygon specifying the region to export. Can be specified as a nested lists of numbers or a serialized string. Defaults to the image's region.</p> <code>None</code> <code>scale</code> <p>The resolution in meters per pixel. Defaults to the native resolution of the image assset unless a crsTransform is specified.</p> <code>None</code> <code>crs</code> <p>The coordinate reference system of the exported image's projection. Defaults to the image's default projection.</p> <code>None</code> <code>crsTransform</code> <p>A comma-separated string of 6 numbers describing the affine transform of the coordinate reference system of the exported image's projection, in the order: xScale, xShearing, xTranslation, yShearing, yScale and yTranslation. Defaults to the image's native CRS transform.</p> <code>None</code> <code>maxPixels</code> <p>The maximum allowed number of pixels in the exported image. The task will fail if the exported region covers more pixels in the specified projection. Defaults to 100,000,000.</p> <code>None</code> <code>**kwargs</code> <p>Holds other keyword arguments that may have been deprecated such as 'crs_transform'.</p> <code>{}</code>"},{"location":"colab/compositing/","title":"Compositing Example","text":""},{"location":"colab/compositing/#open-in-colab","title":"Open in Colab","text":""},{"location":"colab/primitives/","title":"Primitives Example","text":""},{"location":"colab/primitives/#open-in-colab","title":"Open in Colab","text":""},{"location":"colab/sampling/","title":"Sampling Example","text":""},{"location":"colab/sampling/#open-in-colab","title":"Open in Colab","text":""}]}